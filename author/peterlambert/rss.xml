<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.bracebin.com</title>
   
   <link>https://blog.bracebin.com/</link>
   <description>Adventures in software development <br/>and getting things done.</description>
   <language>en-uk</language>
   <managingEditor> Peter Lambert</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Achieving a Perfect SSL Labs Score with Go</title>
	  <link>//achieving-perfect-ssl-labs-score-with-go</link>
	  <author>Peter Lambert</author>
	  <pubDate>2016-05-20T10:00:00+01:00</pubDate>
	  <guid>//achieving-perfect-ssl-labs-score-with-go</guid>
	  <description><![CDATA[
	     
<p>Go does a great job of getting a good SSL Labs Score out of the box,
however I thought it would be interesting to see what would be needed
to achieve the perfect score, getting 100% in all categories and not just a boring A.</p>

<p>There are plenty of guides around that demonstrate how to do this with NGINX or
Apache, but there seems little that explains what is required for a typical
Go app.</p>

<p>Qualys have a detailed guide that is very clear about how you can improve your score.
I’ll refer to various sections, however you can
<a href="https://www.ssllabs.com/downloads/SSL_Server_Rating_Guide.pdf">check it out yourself here</a>.</p>

<p>First of all, let’s see what Go scores with default configuration.</p>

<h2 id="standard-go-server-with-tls">Standard Go Server With TLS</h2>

<script src="https://gist.github.com/MrPeterLambert/a45f313a87b2681f3473937a8a51e2cc.js"></script>

<p>and the score…</p>

<p><img src="/assets/images/go-ssl-perfect-score/01-standard.png" alt="Standard Go Server - SSL Labs Result" /></p>

<p>OK, not bad. An A is a pretty good score. Let’s see if we can get an A+.</p>

<h2 id="getting-an-a-with-hsts">Getting an A+ with HSTS</h2>

<p>The <a href="https://www.ssllabs.com/downloads/SSL_Server_Rating_Guide.pdf">SSL Rating Guide</a> states:</p>

<blockquote>
  <p>New grade A+ is introduced for servers with exceptional configurations. At the
moment, this grade is awarded to servers with good configuration, no warnings,
and HTTP Strict Transport Security support with a <code class="highlighter-rouge">max-age</code> of at least 6 months.</p>
</blockquote>

<p>The basic server already has a good configuration and no warnings, so we just
need to add <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HSTS</a>
(with a long <code class="highlighter-rouge">max-age</code>).</p>

<p>HSTS is simply a HTTP header (<code class="highlighter-rouge">Strict-Transport-Security</code>) that instructs the browser to change all http:// requests
to https://.</p>

<script src="https://gist.github.com/MrPeterLambert/27b1ae2df7da7f91522dc643ff3fff36.js"></script>

<p>Excellent. We now get an A+.</p>

<p><img src="/assets/images/go-ssl-perfect-score/02-hsts.png" alt="HSTS Support- SSL Labs Result" /></p>

<p><strong>You should probably stop here.</strong> Continuing to attempt to achieve a perfect score
will result in reduced client compatibility. This means that many users will not
be able to access your site.</p>

<h2 id="protocol-support">Protocol Support</h2>

<p>Protocol support is already at 90%, so there shouldn’t be much to do.</p>

<p>Getting 100% requires that the server only supports TLS 1.2 or above. This is
easily changed by manually configuring a &amp;tls.Config{} struct rather than
allowing the server to use the default configuration.</p>

<script src="https://gist.github.com/MrPeterLambert/e38ed8de7d1f064e4ad1ed4e3cc13025.js"></script>

<p>Re-running the test…</p>

<p><img src="/assets/images/go-ssl-perfect-score/03-protocol-support.png" alt="Protocol Support- SSL Labs Result" /></p>

<p>Great. 100% on protocol support. Onto key exchange.</p>

<h2 id="key-exchange">Key Exchange</h2>

<p>From the <a href="https://www.ssllabs.com/downloads/SSL_Server_Rating_Guide.pdf">SSL Rating Guide</a></p>

<blockquote>
  <p>Key or DH parameter strength &gt;= 4096 bits (e.g., 4096)</p>
</blockquote>

<p>Looking at my private key, the default size provided by Let’s Encrypt is 2048 bit.
Re-generating a new one was easy. I use <a href="https://github.com/xenolf/lego">an excellent third party ACME client called Lego</a>.
This tool is also written in Go and is very easy to use. I generated a new key and retrieved a new certificate with the
following command.</p>

<p><code class="highlighter-rouge">lego -d tlstest.example.com -m admin@example.com --rsa-key-size=4096 run</code></p>

<p>In addition, I was required to change the CurvePreferences, to prioritise using the
elliptic curve algorithms with an approximate comparable symmetric key size of &gt;=4096 bit.</p>

<p>I simply took the default configuration from the go source and moved the lower
equivalent key size to the end.
<!---
http://tools.ietf.org/html/draft-ietf-msec-mikey-ecc-03 see table:1)
--></p>

<script src="https://gist.github.com/MrPeterLambert/ffede7461638a22ac01e6c3538192f74.js"></script>

<p>Re-running the test…</p>

<p><img src="/assets/images/go-ssl-perfect-score/04-key-exchange.png" alt="Key Exchange - SSL Labs Result" /></p>

<p>Whoop! 100% on key exchange. Just one more.</p>

<h2 id="cipher-strength">Cipher Strength</h2>

<p>From the <a href="https://www.ssllabs.com/downloads/SSL_Server_Rating_Guide.pdf">SSL Rating Guide</a></p>

<blockquote>
  <ol>
    <li>Start with the score of the strongest cipher.</li>
    <li>Add the score of the weakest cipher.</li>
    <li>Divide the total by 2.</li>
  </ol>
</blockquote>

<blockquote>
  <p>&gt;= 256 bits (e.g., 256) = 100%</p>
</blockquote>

<p>This means I need to take the default CipherSuites and simply remove any that
use a cipher smaller than 256bit.</p>

<script src="https://gist.github.com/MrPeterLambert/6dd08518661f3cf69ea79b0978d9e5b8.js"></script>

<p>No HTTP/2 for you! - HTTP/2 was enabled by default in go 1.6, however HTTP/2
mandates the support of the cipher suite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.
As this is a 128bit cipher, it needs to be removed.
The only way to achieve a perfect score now is to disable HTTP/2.</p>

<p>This is not as obvious as you might think.</p>

<p><a href="https://golang.org/doc/go1.6#http2">from the go 1.6 release notes</a></p>

<blockquote>
  <p>Programs that must disable HTTP/2 can do so by setting Transport.TLSNextProto
(for clients) or Server.TLSNextProto (for servers) to a non-nil, empty map.</p>
</blockquote>

<p>Adding this to our code…</p>

<script src="https://gist.github.com/MrPeterLambert/3dc885425008c5467349f4ce656232bd.js"></script>

<p>Disabling HTTP/2 also disables the server cipher preference which results the following warning:</p>

<blockquote>
  <p>The server does not support Forward Secrecy with the reference browsers. Grade reduced to A-.</p>
</blockquote>

<p>This can be corrected by setting the <code class="highlighter-rouge">PreferServerCipherSuites</code> option in tls.Config.</p>

<script src="https://gist.github.com/MrPeterLambert/c97eada7b5362a8316d1e4b85b2f609a.js"></script>

<p>One last test…</p>

<p><img src="/assets/images/go-ssl-perfect-score/05-cipher-strength.png" alt="Cipher Strength - SSL Labs Result" /></p>

<p>Success!</p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<script src="https://gist.github.com/MrPeterLambert/152777ca75d6ff71d2100234373261b4.js"></script>


	  ]]></description>
	</item>


</channel>
</rss>
